#include <stdio.h>
struct Process {
int id, bt, rt, wt, tat;
};
int main() {
int n, tq;
printf("Enter number of processes: "); 
scanf("%d", &n);
struct Process p[n];
int totalBT = 0;
int i;
// Input burst times
for (i = 0; i < n; i++) {
p[i].id = i + 1;
printf("Enter burst time for process %d: ", p[i].id); scanf("%d", &p[i].bt);
p[i].rt = p[i].bt; // remaining time 
initially = burst time p[i].wt = p[i].tat = 0;
totalBT += p[i].bt;
}
printf("Enter time quantum: "); scanf("%d", &tq);
int time = 0, done;
 

do {
done = 1;
for (i = 0; i < n; i++) { if (p[i].rt > 0) {
done = 0;
if (p[i].rt > tq) { time += tq; p[i].rt -= tq;
} else {
time += p[i].rt;
p[i].wt = time - p[i].bt; p[i].tat = time;
p[i].rt = 0;
}
}
}
} while (!done);
// Print results printf("\nProcess\tBT\tWT\tTAT\n"); int totalWT = 0, totalTAT = 0;
for (i = 0; i < n; i++) {
printf("P%d\t%d\t%d\t%d\n", p[i].id, p[i].bt, p[i].wt, p[i].tat); totalWT += p[i].wt;
totalTAT += p[i].tat;
}
printf("\nAverage Waiting Time = %.2f", (float) totalWT / n); 
printf("\nAverage Turnaround Time = %.2f\n", (float) totalTAT / n);
return 0;
}
